<!DOCTYPE html>
<html lang="pl">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Siatka Heksagonalna</title>
	<style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            margin: 20px;
        }
        #map-container {
            width: 800px;
            height: 800px;
            overflow: hidden;
            position: relative;
            border: 1px solid black;
            margin: 20px auto;
        }
        #map {
            position: absolute;
            width: 10000px;
            height: 10000px;
            background-color: #ccc;
        }
        canvas {
            border: 1px solid black;
            display: block;
            margin: 20px auto;
        }
	</style>
</head>
<body>
<h1>Siatka Heksagonalna</h1>

<div id="map-container">
	<div id="map" data="{{ coordinates | raw }}">
		<canvas id="hexCanvas"></canvas>
	</div>
</div>

<input type="range" id="xRange" min="0" max="9800" value="0">
<input type="range" id="yRange" min="0" max="9800" value="0">

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    // Funkcja do aktualizacji mapy
    function updateMap() {
        const x = $('#xRange').val();
        const y = $('#yRange').val();

        $.ajax({
            url: "{{ path('update_map') }}",
            method: "GET",
            data: { x, y },
            success: function(data) {
                $('#map').html(data);
                // Po załadowaniu danych rysujemy heksagony
                drawHexagons();
            }
        });
    }

    // Funkcja do rysowania heksagonów
    function drawHexagons() {
        const canvas = document.getElementById('hexCanvas');
        const ctx = canvas.getContext('2d');
        if (!ctx) {
            console.error('Kontekst 2D nie został poprawnie załadowany');
            return;
        }

        // Ustawienia canvas
        canvas.width = $('#map').width();
        canvas.height = $('#map').height();

        // Wczytanie danych z atrybutu danych mapy
		const data ='coordinates'
        const dataCoordinates = document.getElementById('map').getAttribute('data');
		// console.log(dataCoordinates)
        // const coordinates = JSON.parse('data');
        let coordinates = [];
        try {
            coordinates = JSON.parse(dataCoordinates);
        } catch (e) {
            console.error('Błąd parsowania JSON:', e);
            return;
        }
        console.log(coordinates)

        const radius = 30; // Stały promień dla rysowania heksagonów
        const hexHeight = Math.sqrt(3) * radius;
        const hexWidth = 2 * radius;
        const vertDist = hexHeight;
        const horizDist = 3/2 * radius;

        function drawHex(x, y, color) {
            ctx.beginPath();
            for (let i = 0; i < 6; i++) {
                ctx.lineTo(x + radius * Math.cos(i * Math.PI / 3), y + radius * Math.sin(i * Math.PI / 3));
            }
            ctx.closePath();
            ctx.fillStyle = color;
            ctx.fill();
            ctx.strokeStyle = 'black';
            ctx.stroke();
        }

        coordinates.forEach(coord => {
            const x = coord.point_x * horizDist;
            const y = coord.point_y * vertDist + (coord.point_x % 2) * (vertDist / 2);
            const color = getColorFromStatus(coord.status);
            drawHex(x, y, color);
        });

        function getColorFromStatus(status) {
            const colorMap = {
                'Biały': '#FFFFFF',
                'Czarny': '#000000',
                'Czerwony': '#FF0000',
                'Zielony': '#00FF00',
                'Niebieski': '#0000FF',
                'Żółty': '#FFFF00',
                'Szary': '#808080'
            };
            return colorMap[status] || '#FFFFFF';
        }
    }

    // Dodanie nasłuchiwaczy na suwaki
    $('#xRange, #yRange').on('input', updateMap);

    // Inicjalne załadowanie mapy
    updateMap();
</script>
</body>
</html>
